swagger: '2.0'
info:
  title: Monorail API
  description: Monorail CI core API
  version: "1.1.0"
schemes:
  - http
  - https
basePath: /api/1.1
produces:
  - application/json
  # x-gzip explicitly for files
  - application/x-gzip
paths:
  /nodes/{identifier}/obm/identify:
    get:
      summary: |
        Fetch status of identify light on node through OBM (if supported)
      description: |
        Fetch status of identify light on node through OBM (if supported)
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
      tags:
        - nodes
        - obm
        - identity
      responses:
        200:
          description: obm identity light settings
          schema: 
            type: object
        404:
          description: |
            The node with the identifier was not found or has no obm settings.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: |
        Enable or disable identify light on node through OBM (if supported)
      description: |
        Enable or disable identify light on node through OBM (if supported)
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
        - name: body
          in: body
          description: |
            obm settings to apply.
          required: true
          schema: 
            type: boolean
      tags:
        - nodes
        - obm
        - identity
      responses:
        201:
          description: obm settings accepted
        404:
          description: |
            The node with the identifier was not found or has no obm settings.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /nodes/{identifier}/obm:
    get:
      summary: |
        get the obm settings associated with a node.
      description: |
        get the obm settings associated with a node.
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
      tags:
        - nodes
        - obm
      responses:
        200:
          description: obm settings
          schema: 
            type: object
        404:
          description: |
            The node with the identifier was not found or has no obm settings.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: |
        set the obm settings associated with a node.
      description: |
        set he obm settings associated with a node.
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
        - name: body
          in: body
          description: |
            obm settings to apply.
          required: true
          schema: 
            type: object
      tags:
        - nodes
        - obm
      responses:
        201:
          description: obm settings accepted
        404:
          description: |
            The node with the identifier was not found or has no obm settings.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /nodes/{identifier}:
    get:
      summary: |
        List of all nodes or if there are none an empty object
      description: |
        List of all nodes or if there are none an empty object
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
      tags:
        - nodes
      responses:
        200:
          description: array of all
          schema:
            type: array
            items: 
              type: object
        404:
          description: The node with the identifier was not found.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: |
        Delete specified node.
      description: |
        Delete specified node.
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
      tags:
        - nodes
      responses:
        200:
          description: Delete successful
        404:
          description: The node with the identifier was not found.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: |
        Patch specified node
      description: |
        Patch specified node
      parameters:
        - name: identifier
          in: path
          description: |
            Mac addresses and unique aliases to identify the node by, |
            expect a string or an array of strings.
          required: true
          type: string
        - name: body
          in: body
          description: |
            object patches to apply.
          required: true
          schema: 
            type: object
      tags:
        - nodes
      responses:
        200:
          description: patch succeeded
          schema:
            type: object
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /nodes:
    get:
      summary: |
        List of all nodes or if there are none an empty object
      description: |
        List of all nodes or if there are none an empty object
      tags:
        - nodes
      responses:
        200:
          description: array of all
          schema:
            type: array
            items: 
              type: object
        400:
          description: invalidAttributes - 1 attribute is invalid
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: |
        post
      description: |
        post
      parameters:
      - name: identifiers
        in: body
        description: |
          Mac addresses and unique aliases to identify the node by, |
          expect a string or an array of strings.
        required: true
        schema:
          type: object
      tags:
        - nodes
      responses:
        201:
          description: waterline response
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /lookups:
    get:
      summary: |
        find all
      description: |
        find all
      tags:
        - lookups
      responses:
        200:
          description: array of all
          schema:
            type: array
            items: 
              type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: |
        find all
      description: |
        put all
      parameters:
      - name: content
        in: body
        description: foo
        required: true
        schema:
          type: object
      tags:
        - lookups
      responses:
        200:
          description: waterline response
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /lookups/{id}:
    get:
      summary: |
        lookup id
      description: |
        lookup id
      parameters:
        - name: id
          in: path
          description: id of thing to lookup
          required: true
          type: string
      tags:
        - lookups
      responses:
        200:
          description: array of all
          schema:
            type: array
            items: 
              type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: |
        post id
      description: |
        post id
      parameters:
      - name: id
        in: path
        description: id of thing to lookup
        required: true
        type: string
      - name: content
        in: body
        description: foo
        required: true
        schema:
          type: object
      tags:
        - lookups
      responses:
        200:
          description: waterline response
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /files/{fileidentifier}:
    get:
      summary: |
        get file based on uuid
      description: |
        Get file based on uuid.
      parameters:
        - name: fileidentifier
          in: path
          description: uuid of a file as provided when you originally stored it.
          required: true
          type: string
      tags:
        - files
      responses:
# https://github.com/swagger-api/swagger-spec/issues/260 means we can't 
# describe the return of a file easily today until jsonspec and swagger 
# are "fixed"
        200:
          description: The file requested
          schema:
            type: object
        404:
          description: File not found.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Failed to serve file request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: |
        put file based on filename
      description: |
        Put file based on filename, returns the uuid of the stored file.
      parameters:
        - name: fileidentifier
          in: path
          description: filename of the file you want to store
          required: true
          type: string
# https://github.com/swagger-api/swagger-spec/issues/326 does not yet accept files
#       - name: content
#          in: body
#          description: the attachment content
#          required: true
#          schema:
#            type: file
#      consumes:
#        - application/octet-stream
      tags:
        - files
      responses:
        200:
          description: The file was stored
          schema:
            type: object
        201:
          description: Ready.
          schema:
            type: string
        500:
          description: Failure serving file request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: |
        delete file based on uuid
      description: |
        Put file based on filename, returns the uuid of the stored file.
      parameters:
        - name: fileidentifier
          in: path
          description: filename identifier of the file you wish to delete
          required: true
          type: string
      tags:
        - files
      responses:
        204:
          description: File successfully deleted.
        404:
          description: File not found.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Error deleting file from the database.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /config:
    get:
      summary: |
        get server configuration
      description: |
        Get server configuration.
      tags:
        - config
      responses:
        200:
          description: An array of configuration objects
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: |
        patch/update server configuration
      description: |
        Patch/update server configurationm and then return the patched configuration.
      tags:
        - config
      responses:
        200:
          description: An array of configuration objects
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /catalogs:
    get:
      summary: |
        get list of all catalogs
      description: |
        The catalogs endpoint returns json data that represent the catalogs of
        all hardware in the system.
      parameters:
        - name: query
          in: query
          description: query object to pass through to waterline.
          required: false
          type: string
      tags:
        - catalog
      responses:
        200:
          description: An array of catalogs
          schema:
            type: array
            items:
              $ref: '#/definitions/catalog'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /catalogs/{identifier}:
    get:
      summary: |
        get list of all catalogs
      description: |
        The catalogs endpoint returns json data that represent the catalogs of
        all hardware in the system.
      parameters:
        - name: identifier
          in: path
          description: identifier of a catalog
          required: true
          type: string
      tags:
        - catalog
      responses:
        200:
          description: A single catalog
          schema:
            type: array
            items:
              $ref: '#/definitions/catalog'
        default:
          description: NotFound error
  /dhcp:
    get:
      summary: |
        get DHCP lease table
      description: |
        Fetch the dhcp leases.
      tags:
        - dhcp
      responses:
        200:
          description: |
            A list of all DHCP leases registered with this instance of the service.
          schema:
            type: array
            items:
              $ref: '#/definitions/lease'
        default:
          description: NotFound error
  /dhcp/lease/{mac}:
    get:
      summary: |
        fetch lease information for the mac specified
      description: |
        Fetch lease information for the mac specified.
      parameters:
        - name: mac
          in: path
          description: identifier of a mac address
          required: true
          type: string
      tags:
        - dhcp
      responses:
        200:
          description: A single lease
          schema:
            type: array
            items:
              $ref: '#/definitions/lease'
        default:
          description: NotFound error
    delete:
      summary: get list of all catalogs
      description: |
        Delete the lease for the mac specified and return information about deleted lease.
      parameters:
        - name: mac
          in: path
          description: identifier of a mac address
          required: true
          type: string
      tags:
        - dhcp
      responses:
        200:
          description: A single lease
          schema:
            type: array
            items:
              $ref: '#/definitions/lease'
        default:
          description: NotFound error

definitions:
  catalog:
    type: object
    properties:
      id:
        type: string
      source:
        type: string
      node:
        $ref: '#/definitions/node'
      data:
        type: object
        description: arbitrary json object
    required:
    - id
    - source
    - node
  node:
    type: object
    properties:
      id:
        type: string
      profile:
        type: string
      name:
        type: string
      obmSettings:
        type: object
      ipAddresses:
        type: object
      workflows:
        type: array
        items:
          $ref: '#/definitions/graphobject'
      catalogs:
        type: array
        items:
          $ref: '#/definitions/catalog'
      sku:
        $ref: '#/definitions/sku'
    required:
    - profile
    - name
  graphobject:
    properties:
      id:
        type: string
      instanceid:
        type: string
      context:
        type: object
      definition:
        type: object
      tasks:
        type: object
      node:
        $ref: '#/definitions/node'
  sku:
    properties:
      id:
        type: string
      name:
        type: string
      rules:
        type: object
      nodes:
        type: array
        items:
          $ref: '#/definitions/node'
      discoveryGraphName:
        type: string
      discoveryGraphOptions:
        type: object
  lease:
    properties:
      mac:
        type: string
      ipAddress:
        type: string
      reservationTimer:
        type: integer
        format: int32
      reservationExpiresAt:
        type: integer
        format: int64
      renewalTimer:
        type: integer
        format: int32
      rebindingTimer:
        type: integer
        format: int32
      expirationTimer:
        type: integer
        format: int32
      renewalExpiresAt:
        type: integer
        format: int64
      rebindExpiresAt:
        type: integer
        format: int64
      leaseExpiresAt:
        type: integer
        format: int64
      boundFlag:
        type: boolean
      reservedFlag:
        type: boolean
      reserveTimer:
        type: string
        format: int64
    example:
      mac: 08:00:27:52:d2:a4
      ipAddress: 10.1.1.2
      reservationTimer: 30
      renewalTimer: 21600
      rebindingTimer: 4320
      expirationTimer: 86400
      renewalExpiresAt: 1424149074811
      rebindExpiresAt: 1424131794811
      leaseExpiresAt: 1424213874811
      boundFlag: true
      reservedFlag: false
    required:
    - mac
    - ipAddress
  Error:
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
