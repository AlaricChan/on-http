accepteula
<% if (installDisk === "firstdisk") { %>
  clearpart --firstdisk --overwritevmfs
  install --firstdisk --overwritevmfs
<% } else { %>
  clearpart --drives=<%=installDisk%> --overwritevmfs
  install --disk=<%=installDisk%> --overwritevmfs
<% } %>
rootpw <%=rootPlainPassword%>

# Search the networkDevices and set the first device (if defined) up.
# If no device is specified in the networkDevices, then we fallback
# to setting 'vmnic0' up as DHCP. The device can be specified with a
# MAC address or device name ('vmnic0' for example)
<% if( typeof networkDevices !== 'undefined' ) { %>
  <% need_default = networkDevices.every(function(n) { %>
    <% if(typeof n.ipv4 !== 'undefined') { %>
      <% ipopts = '--ip=' + n.ipv4.ipAddr + ' --gateway=' + n.ipv4.gateway + ' --netmask=' + n.ipv4.netmask %>
      <% if (typeof n.ipv4.vlanIds !== 'undefined' ) { %>
        <% ipopts += ' --vlandid=' + n.ipv4.vlanIds[0] %>
      <% } %>
      network --bootproto=static --device=<%=n.device%> <%=ipopts%>
    <% } else { %>
      network --bootproto=dhcp --device=<%=n.device%>
    <% } %>
    <% return false; %>
  <% }); %>
  <% if (need_default) { %>
    network --bootproto=dhcp --device=vmnic0
  <% } %>
<% } %>
#reboot

%post --interpreter=busybox
#create python script to add/update vmk mac

cat > /vmfs/volumes/datastore1/postLookup.py <<EOF
import urllib, urllib2, json, sys, time

args = sys.argv
query_args = { 'q': args[1] }
encoded_args = urllib.urlencode(query_args)

url = "http://<%=server%>:<%=port%>/api/1.1/lookups"

time.sleep(5)
response = urllib2.urlopen(url + "?" + encoded_args)
data = json.loads(response.read())
print data

request = urllib2.Request(url)
body = {'node': '<%=task.nodeId%>', 'macAddress'  : args[1]}

if len(data) > 0:
  request = urllib2.Request(url + "/" + data[0]["id"])
  request.get_method = lambda: 'PATCH'
if len(args) > 2:
  body.update({'ipAddress': args[2]})

request.add_header('Content-Type', 'application/json')

response = urllib2.urlopen(request, json.dumps(body))
data = json.loads(response.read())
print data

EOF

postLookup () {
  echo "Attempting postLookup operation on $1" >> /vmfs/volumes/datastore1/firstboot.log
  mac=`localcli --formatter=table network ip interface list | grep $1 | awk '{print $3}'`
  if [ "<%=version%>" == "5.5" ]; then
    mac=`localcli --formatter=table network ip interface list | grep $1 | awk '{print $2}'`
  fi

  python /vmfs/volumes/datastore1/postLookup.py $mac $2
}

postLookup

EOF

for nic in $(localcli network nic list | grep vmnic | awk '{print $1}'); do
  localcli network vswitch standard add -v vSwitch${nic#vmnic*}
  localcli network vswitch standard uplink add -v vSwitch${nic#vmnic*} -u ${nic}
  localcli network vswitch standard portgroup add -p ${nic} -v vSwitch${nic#vmnic*}
  localcli network ip interface remove -i vmk${nic#vmnic*}
  localcli network ip interface add -i vmk${nic#vmnic*} -p ${nic}
  localcli network ip interface ipv4 set -i vmk${nic#vmnic*} -t dhcp
  postLookup vmk${nic#vmnic*}

done


<% if( typeof postInstallCommands !== 'undefined' ) { %>
  <% postInstallCommands.forEach(function(n) { %>
    <%=n%>
  <% }); %>
<% } %>

#signify ORA the installation completed
/bin/sleep 30
/usr/bin/wget -s http://<%=server%>:<%=port%>/api/common/templates/<%=completionUri%>

#reboot the system after host configuration
/bin/reboot


%firstboot --interpreter=busybox

vim-cmd hostsvc/enable_ssh
vim-cmd hostsvc/start_ssh
vim-cmd hostsvc/enable_esx_shell
vim-cmd hostsvc/start_esx_shell

# enable VHV (Virtual Hardware Virtualization to run nested 64bit Guests + Hyper-V VM)
grep -i "vhv.enable" /etc/vmware/config || echo "vhv.enable = \"TRUE\"" >> /etc/vmware/config

#suppress shell warnings
esxcli system settings advanced set -o /UserVars/SuppressShellWarning -i 1

#Set the ESXi Shell Interactive idle time logout
esxcli system settings advanced set -o /UserVars/ESXiShellInteractiveTimeout -i 3600

# disable firewall
esxcli network firewall set --default-action false --enabled no

# set hostname and domain
<% var hostnameCmdStr=''; %>
<% if (typeof domain === 'string') hostnameCmdStr += (' --domain ' + domain) %>
<% if (typeof hostname === 'string') hostnameCmdStr += (' --host ' + hostname) %>
<% if (typeof fqdn === 'string') hostnameCmdStr += (' --fqdn ' + fqdn) %>
<% if (hostnameCmdStr.length > 0) { %>
    esxcli system hostname set <%=hostnameCmdStr%>
<% } %>

#config root account
<% if (typeof rootSshKey !== 'undefined') { %>
    echo <%=rootSshKey%> > /etc/ssh/keys-root/authorized_keys
<%} %>

#create users
<% if( typeof users !== 'undefined' ) { %>
<% users.forEach(function(user) { %>
    /usr/lib/vmware/auth/bin/adduser -s /bin/sh -G root -h / -D <%=user.name%>
    echo <%=user.plainPassword%> | passwd <%=user.name%> --stdin
    <% if (typeof user.sshKey !== 'undefined') { %>
        mkdir /etc/ssh/keys-<%=user.name%>
        echo <%=user.sshKey%> > /etc/ssh/keys-<%=user.name%>/authorized_keys
    <%} %>
<%}) %>
<%} %>

#setup ntp
cat > /etc/ntp.conf << __NTP_CONFIG__
restrict default kod nomodify notrap noquerynopeer
restrict 127.0.0.1 kkl,lkl
<% if( typeof ntpServers !== 'undefined' ) { %>
   <% ntpServers.forEach(function(ntp) { %>
      server <%= ntp %>
   <% }); %>
<% } %>
__NTP_CONFIG__
/sbin/chkconfig ntpd on

#backup ESXi configuration to persist it
/sbin/auto-backup.sh

#enter maintenance mode
esxcli system maintenanceMode set -e true

#copy the first boot logs
cp /var/log/hostd.log "/vmfs/volumes/datastore1/firstboot-hostd.log"
cp /var/log/esxi_install.log "/vmfs/volumes/datastore1/firstboot-esxi_install.log"

postLookup () {
  echo "Attempting postLookup operation on $1" >> /vmfs/volumes/datastore1/firstboot.log
  mac=`localcli --formatter=table network ip interface list | grep $1 | awk '{print $3}'`
  if [ "<%=version%>" == "5.5" ]; then
    mac=`localcli --formatter=table network ip interface list | grep $1 | awk '{print $2}'`
  fi

  python /vmfs/volumes/datastore1/postLookup.py $mac $2
}

#setup DNS
<% if( typeof dnsServers !== 'undefined' ) { %>
  <% if ( typeof domain !== 'undefined' ) { %>
  esxcli network ip dns search add --domain=<%=domain%>
  <% } %>
  <% dnsServers.forEach(function(dns) { %>
    localcli network ip dns server add --server=<%= dns %>
  <% }); %>
<% } %>

#create vSwitches with uplinks. An uplink can be specifed with its MAC
#address or device name
<% if ( typeof switchDevices !== 'undefined' ) { %>
  <% switchDevices.forEach(function(n) { %>
    localcli network vswitch standard add -v "<%=n.switchName%>"
    <% if( typeof n.uplinks !== 'undefined' ) { %>
      <% n.uplinks.forEach(function(s) { %>
        currdev = <%=s%>
        <% if (s.substring(0,5) !== 'vmnic') { %>
          currdev=`localcli network nic list | grep <%=s%> | cut -d ' ' -f 1`
        <% } %>
        currsw=`localcli --debug --formatter=csv network vswitch standard list | grep $currsw | awk -F, '{print $9}'`
        if [ "$currsw" != "" ]; then
          localcli network vswitch standard uplink remove -v $currsw -u $currdev
        fi
        localcli network vswitch standard uplink add -v <%=n.switchName%> -u $currdev
      <% }); %>
    <% } %>
  <% }); %>
<% } %>

<% vmkid = 0 %>
<% if( typeof networkDevices !== 'undefined' ) { %>
  <% if( networkDevices.length > 0 ) { %>

  <% networkDevices.forEach(function(n) { %>
    currdev = <%=n.device%>
    <% if (n.device.substring(0,5) != 'vmnic') { %>
       currdev=`localcli network nic list | grep <%=n.device%> | cut -d ' ' -f 1`
    <% } %>
    <% if( undefined !== n.ipv4 ) { %>
      <% if( undefined !== n.ipv4.vlanIds ) { %>
        <% n.ipv4.vlanIds.forEach(function(vid) { %>
          <% vmkname = 'vmk' + vmkid++ %>
          localcli network vswitch standard portgroup add -p $currdev.<%=vid%> -v "<%= typeof n.esxSwitchName!='undefined' ? n.esxSwitchName : 'vSwitch0' %>"
          localcli network ip interface remove -i <%=vmkname%>
          localcli network ip interface add -i <%=vmkname%> -p $currdev.<%=vid%>
          localcli network ip interface ipv4 set -i <%=vmkname%> -I <%=n.ipv4.ipAddr%> -N <%=n.ipv4.netmask%> -t static
          localcli network ip route ipv4 add -n default -g <%=n.ipv4.gateway%>
          localcli network vswitch standard portgroup set -p $currdev.<%=vid%> -v <%=vid %>
          postLookup <%=vmkname%> <%=n.ipv4.ipAddr%>
        <% }); %>
      <% } else { %>
        <% vmkname = 'vmk' + vmkid++ %>
        localcli network vswitch standard portgroup add -p $currdev -v <%= typeof n.esxSwitchName!='undefined' ? n.esxSwitchName : 'vSwitch0' %>
        localcli network ip interface remove -i <%=vmkname%>
        localcli network ip interface add -i <%=vmkname%> -p $currdev
        localcli network ip interface ipv4 set -i <%=vmkname%> -I <%=n.ipv4.ipAddr%> -N <%=n.ipv4.netmask%> -t static
        localcli network ip route ipv4 add -n default -g <%=n.ipv4.gateway%>
        postLookup <%=vmkname%> <%=n.ipv4.ipAddr%>
      <% } %>
    <% } %>
    <% if( undefined !== n.ipv6 ) { %>
      <% if( undefined !== n.ipv6.vlanIds ) { %>
        <% n.ipv6.vlanIds.forEach(function(vid) { %>
          <% vmkname = 'vmk' + vmkid++ %>
          localcli network vswitch standard portgroup add -p $currdev.<%=vid%> -v <%= typeof n.esxSwitchName!='undefined' ? n.esxSwitchName : 'vSwitch0' %>
          localcli network ip interface remove -i <%=vmkname%>
          localcli network ip interface add -i <%=vmkname%> -p $currdev.<%=vid%>
          localcli network ip interface ipv6 address add -i <%=vmkname%> -I <%=n.ipv6.ipAddr%>
          localcli network vswitch standard portgroup set -p $currdev.<%=vid%> -v <%=vid %>
        <% }); %>
      <% } else { %>
        <% vmkname = 'vmk' + vmkid++ %>
        localcli network vswitch standard portgroup add -p $currdev -v <%= typeof n.esxSwitchName!='undefined' ? n.esxSwitchName : 'vSwitch0' %>
        localcli network ip interface remove -i <%=vmkname%>
        localcli network ip interface add -i <%=vmkname%> -p $currdev
        localcli network ip interface ipv6 address add -i <%=vmkname%> -I <%=n.ipv6.ipAddr%>
      <% } %>
    <% } %>
    <% if( (undefined === n.ipv6) && (undefined === n.ipv4) ) { %>
      <% vmkname = 'vmk' + vmkid++ %>
      localcli network vswitch standard portgroup add -p $currdev -v <%= typeof n.esxSwitchName!='undefined' ? n.esxSwitchName : 'vSwitch0' %>
      localcli network ip interface remove -i <%=vmkname%>
      localcli network ip interface add -i <%=vmkname%> -p $currdev
      localcli network ip interface ipv4 set -i <%=vmkname%> -t dhcp
    <% } %>
  <% }); %>
<% } %>
<% } else { %>
    for nic in $(localcli network nic list | grep vmnic | awk '{print $1}'); do
      localcli network vswitch standard add -v vSwitch${nic#vmnic*}
      localcli network vswitch standard uplink add -v vSwitch${nic#vmnic*} -u ${nic}
      localcli network vswitch standard portgroup add -p ${nic} -v vSwitch${nic#vmnic*}
      localcli network ip interface remove -i vmk${nic#vmnic*}
      localcli network ip interface add -i vmk${nic#vmnic*} -p ${nic}
      localcli network ip interface ipv4 set -i vmk${nic#vmnic*} -t dhcp
      postLookup vmk${nic#vmnic*}

    done
<% } %>

#signify ORA the installation completed
/usr/bin/wget -s http://<%=server%>:<%=port%>/api/common/templates/<%=completionUri%>
EOF