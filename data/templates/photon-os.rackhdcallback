#! /bin/bash
#
# photon-os.rackhdcallback       callback to rackhd post installation API hook
#
# description: calls back to rackhd post installation API hook
#
### BEGIN INIT INFO
# Provides: photon-os.rackhdcallback
# Required-Start:    $network
# Default-Start:     3 4 5
# Short-Description: Callback to rackhd post installation API hook
# Description: Callback to rackhd post installation API hook
### END INIT INFO


# We can't really know when networking is actually up and running from
# a simple "Required-Start: $network", so instead just use curl with
# a bunch of retries and hope it works. We could use more sophisticated
# dependency mechanisms provided by systemd, but ideally we can just use
# a single script to service both CentOS 6.5 and CentOS 7 installs, hence
# reasoning for using `wget --retry-connrefused` below. Using `curl --retry`
# fails immediately because it only handles connection timeouts, not connection
# refused cases.
# See https://www.freedesktop.org/wiki/Software/systemd/NetworkTarget/

# Nothing wrong with set -e here since we're not doing anything complex
# set -e
echo "Attempting to call back to RackHD Photon OS installer"

max_count=30
interval=5
host=<%=server%>

count=0

while [ $count -lt $max_count ]
do
	ping -c 1 $host 1>/dev/null
	
	if [ $? -eq 0 ]
    	then
        echo http://<%=server%>:<%=port%>/api/common/templates/<%=completionUri%>
        # Retry 100 times, delay between retry set to 1 second, total operation limits
        # to 1000 seconds, each connection fail at 9 seconds
        /bin/curl --max-time 1000 --connect-timeout 9 --retry-delay 1 --retry 100 http://<%=server%>:<%=port%>/api/common/templates/<%=completionUri%>

        # Only run this once to verify the OS was installed, then stop the service and remove itself forever
        systemctl disable photon-os.rackhdcallback.service
        rm /etc/photon-os.rackhdcallback
        rm /etc/systemd/system/photon-os.rackhdcallback.service
        exit
	fi
	
    sleep $interval
	count=$((count + 1))
	echo try connecting $host, count = $count, max = $max_count
done
